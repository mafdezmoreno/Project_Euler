/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

import Foundation

let start_time = DispatchTime.now()


    // Real start of the program
    /*
    let prev_seventh_value = seventh_triangle_number(prev_seventh:0,prev_seventh_value:0, value:6);
    print( prev_seventh_value); //21
    print( seventh_triangle_number(prev_seventh: 6, prev_seventh_value:prev_seventh_value, value: 7)); //28
    */
    /*
    print(21);
    let factor_vec = factors( value:21);
    print(factor_vec);  //1 21 3 7 
    */
    
    //print(get_seventh_triangle_number_over_divisors(value:5)); //28
    print(get_seventh_triangle_number_over_divisors(value:500)); //76576500 //42.573916 ms

    // End of the program

let end_time = DispatchTime.now()
let msTime:Double = Double(end_time.uptimeNanoseconds - start_time.uptimeNanoseconds)/1_000_000
print ("\(msTime) ms")


func seventh_triangle_number(prev_seventh: UInt , prev_seventh_value:UInt , value:UInt) -> UInt{
    var seventh = prev_seventh_value;
    for i in (prev_seventh+1)..<(value+1){
        seventh = seventh + i
    }
    return seventh
}


func factors(value: UInt) -> [UInt]{

    let temp1 = sqrt(Double(value))
    let temp2 = UInt(temp1)
    var factors:[UInt] = [1, value];

    if (temp2>=2){
        for i in 2..<temp2{
            if (value%i==0) {
                factors.append(i);
                factors.append(value/i);
            }
        }
    }
    if(temp1==Double(temp2)){
        factors.append(temp2)
    }

    return factors
}

func get_seventh_triangle_number_over_divisors(value: UInt) -> UInt {

    var seventh_value:UInt = 1;
    var seventh_index:UInt = 1;
    while (true) {
        
        let divisors = (factors(value:seventh_value)).count;
        if divisors >= value {
            break;
        }
        seventh_index=seventh_index+1;
        seventh_value = seventh_triangle_number(prev_seventh: seventh_index-1, prev_seventh_value: seventh_value, value: seventh_index);
    }
    return seventh_value
}
