/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

fn main(){

    use std::time::Instant;
    let now = Instant::now();



    // Real start of the program
    /*
    let prev_seventh_value = seventh_triangle_number(0,0,6);
    println!("6: {}", prev_seventh_value); //21
    println!("7: {}", seventh_triangle_number(6,prev_seventh_value,7)); //28

    print!("{}:  ", 21);
    let factor_vec = factors(21);
    println!("{:?}", factor_vec);  //1 21 3 7 
  
    print!("{}:  ", get_seventh_triangle_number_over_divisors(5)); //28 //0ms
    */
    println!("Result: {}", get_seventh_triangle_number_over_divisors(500)); //76576500 //50.52ms

    // End of the program
    let elapsed = now.elapsed();
    println!("Elapsed: {:.2?}", elapsed);

}

fn seventh_triangle_number(prev_seventh:u32 , prev_seventh_value:u32 , value:u32) -> u32{
    let mut seventh = prev_seventh_value;
    for i in (prev_seventh+1)..(value+1){
        seventh = seventh + i;
    }
    seventh
}

fn factors(value: u32)->Vec<u32>{

    let temp1:u32 = (value as f32).sqrt() as u32;
    let temp2:u32 = temp1 as u32;
    let mut factors:Vec<u32> = Vec::new();
    
    factors.push(1);
    factors.push(value);

    for i in 2..temp2{
        if value%i==0 {
            factors.push(i);
            factors.push(value/i);
        }
    }
    if temp1==temp2 {
        factors.push(temp2);
    }
    factors
}

fn get_seventh_triangle_number_over_divisors(value: u32) -> u32 {

    let mut seventh_value:u32 = 1;
    let mut seventh_index:u32 = 1;
    loop {
        
        let divisors = factors(seventh_value).len() as u32;
        if divisors >= value {
            break;
        }
        seventh_index+=1;
        seventh_value = seventh_triangle_number(seventh_index-1, seventh_value, seventh_index);
    }
    seventh_value
}