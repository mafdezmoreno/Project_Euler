/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <math.h>       /* sqrt */
#include <chrono>
#include <vector>
using namespace std::chrono;

unsigned seventh_triangle_number(unsigned prev_seventh,unsigned prev_seventh_value,unsigned value);
std::vector<unsigned> factors(unsigned value);
unsigned get_seventh_triangle_number_over_divisors(unsigned value);

int main(){

    auto start = high_resolution_clock::now();

    //! Real start of the program
    
    //auto prev_seventh_value = seventh_triangle_number(0,0,6);
    //std::cout << prev_seventh_value << std::endl; //21
    //std::cout << seventh_triangle_number(6,prev_seventh_value,7) << std::endl; //28

    /*
    std::cout << 21 << std::endl;
    auto factor_vec = factors(21);
    for (auto i: factor_vec)
        std::cout << i << ' ';
    std::cout<<std::endl;   //1 21 3 7 
    */
  
    //std::cout<< get_seventh_triangle_number_over_divisors(5) << std::endl; //28 //0ms
    std::cout<< get_seventh_triangle_number_over_divisors(500) << std::endl; //76576500 //132ms

    //! Final of the program
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
  
    std::cout << duration.count()/1000 << "ms"<< std::endl;

    return 0;
}

unsigned seventh_triangle_number(unsigned prev_seventh,unsigned prev_seventh_value,unsigned value){
    unsigned seventh = prev_seventh_value;
    for (unsigned i=prev_seventh+1; i<value+1; i++){
        seventh = seventh + i;
    }
    return seventh;
}

std::vector<unsigned> factors(unsigned value){

    long double temp1=sqrt(value);
    unsigned int temp2=int(temp1);
    std::vector<unsigned> factors;
    factors.push_back(1);
    factors.push_back(value);

    for (unsigned i=2; i<temp2; i++){
        if(value%i==0){
            factors.push_back(i);
            factors.push_back(floor(value/i));
        }
    }
    if(temp1==temp2)
        factors.push_back(temp2);

    return factors;
}


unsigned get_seventh_triangle_number_over_divisors(unsigned value){

    unsigned divisors = 0;
    unsigned seventh_value = 1;
    unsigned seventh_index = 1;
    while(1){
        auto temp = factors(seventh_value);
        divisors = temp.size();
        if (divisors >= value)
            break;
        seventh_index++;
        seventh_value = seventh_triangle_number(seventh_index-1, seventh_value, seventh_index);
    }
    return seventh_value;
}
//print(get_seventh_triangle_number_over_divisors(5))      #28        //0.000033 s
//print(get_seventh_triangle_number_over_divisors(50))     #25200 //0.000904 s    //0.041302 s
//print(get_seventh_triangle_number_over_divisors(100))   #73920      //0.203230 s
//print(get_seventh_triangle_number_over_divisors(200))   #2031120  //0.049273 s  // 30.082121 s
//print(get_seventh_triangle_number_over_divisors(300))   #2162160 // 0.052654 s //32 s
//print(get_seventh_triangle_number_over_divisors(500))   #76576500 //1.684446 s
