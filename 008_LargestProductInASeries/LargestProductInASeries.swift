/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
7163626956188267042825248360082325753042075296345"

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

*/



import Foundation

let start_time = DispatchTime.now()

extension String {
    subscript(i: Int) -> String {
        return String(self[index(startIndex, offsetBy: i)])
    }
}


let Number_String = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
"""


func String_to_Array (Number:String) -> [Int]{
    
    //print(Number)

    var num: [Int] = []

    for i in 0..<Number.count{
        if (Number[i]=="\n"){
            continue
        }
        //print(Number[i])
        num.append((Int(Number[i]) ?? 0))
    }

    return num
}

func look_for_max_adjacent(number: [Int], number_of_adjacents: Int)-> ([Int],Int){

    var max_adjacent_array = [Int](repeating: 0, count: number_of_adjacents)
    var max_adjacent_product:Int = 0
    
    for i in (number_of_adjacents-1)...(number.count-1){
        //print(number[i])
        var buffer = 1 
        for x in 0...(number_of_adjacents-1){
            buffer = buffer * number[i-x] 
        }

        if (buffer>max_adjacent_product){
            max_adjacent_product = buffer
            var index = (i-3)
            for j in 0...(max_adjacent_array.count-1){
                max_adjacent_array[j] = number[index]
                index = index + 1
            }
            print (max_adjacent_array)
        }
    }
    return (max_adjacent_array, max_adjacent_product)
}

//print(String_to_Array(Number:Number_String))
let number_array:[Int] = String_to_Array(Number:Number_String) 
print(look_for_max_adjacent(number:number_array, number_of_adjacents: 4))
print(look_for_max_adjacent(number:number_array, number_of_adjacents: 13))

let end_time = DispatchTime.now()
let msTime:Double = Double(end_time.uptimeNanoseconds - start_time.uptimeNanoseconds)/1_000_000
print ("\(msTime) ms")